---
description: 
globs: 
alwaysApply: false
---
# Test-Driven Development Workflow

## Mandatory TDD Process

Every feature MUST follow this exact sequence:

1. **Write Failing Test First** - No implementation without a failing test
2. **Minimal Implementation** - Just enough code to make the test pass
3. **Refactor** - Improve code quality while keeping tests green
4. **Verify** - Run full test suite + type checking

## Test Configuration

### Vitest Setup
- **Config**: [vitest.config.ts](mdc:vitest.config.ts) with globals enabled
- **Setup File**: [src/__tests__/setup.ts](mdc:src/__tests__/setup.ts) for environment configuration
- **Coverage**: 80% threshold for branches, functions, lines, statements

### Test File Conventions
- **Unit Tests**: `*.test.ts` alongside source files
- **Integration Tests**: `*.integration.test.ts`
- **Test Structure**: `describe` → `describe` (happy path/error cases) → `it`

### Example Test Pattern
```typescript
describe('FeatureName', () => {
  describe('happy path', () => {
    it('should do expected behavior', () => {
      // Arrange, Act, Assert
    });
  });
  
  describe('error cases', () => {
    it('should handle specific error gracefully', () => {
      // Test error scenarios
    });
  });
});
```

## Verification Commands

Always run before committing:
```bash
pnpm test           # Full test suite
pnpm type-check     # TypeScript compilation
pnpm build          # Production build
```

## Type Testing

See [src/types/Symbol.test.ts](mdc:src/types/Symbol.test.ts) for interface validation patterns. All interfaces must have corresponding type tests.
